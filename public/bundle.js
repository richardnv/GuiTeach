/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/fingerboard.js":
/*!****************************!*\
  !*** ./src/fingerboard.js ***!
  \****************************/
/***/ ((module) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar FingerBoard = /*#__PURE__*/_createClass(function FingerBoard(svgNS) {\n  var _this = this;\n  _classCallCheck(this, FingerBoard);\n  _defineProperty(this, \"render\", function () {\n    _this.fingerBoard = document.createElementNS(_this.svgNS, \"rect\");\n    _this.fingerBoard.setAttribute(\"id\", \"fingerBoard\");\n    _this.fingerBoard.setAttribute(\"x\", \"20\");\n    _this.fingerBoard.setAttribute(\"y\", \"10\");\n    _this.fingerBoard.setAttribute(\"width\", \"1500\");\n    _this.fingerBoard.setAttribute(\"height\", \"180\");\n    _this.fingerBoard.setAttribute(\"fill\", \"saddlebrown\");\n    return _this.fingerBoard;\n  });\n  this.svgNS = svgNS;\n  this.fingerBoard = null;\n  this.nut = null;\n  this.fretCount = 24;\n  this.lastVisibleFret = 24;\n  this.frets = null;\n});\nmodule.exports = FingerBoard;\n\n//# sourceURL=webpack://guiteach/./src/fingerboard.js?");

/***/ }),

/***/ "./src/guitarneck.js":
/*!***************************!*\
  !*** ./src/guitarneck.js ***!
  \***************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar Layout = __webpack_require__(/*! ./layout.js */ \"./src/layout.js\");\nvar FingerBoard = __webpack_require__(/*! ./fingerboard.js */ \"./src/fingerboard.js\");\nvar Note = __webpack_require__(/*! ./note.js */ \"./src/note.js\");\n\n/// <summary>\n/// Represents a fretted stringed instrument.\n/// The GuitarNeck class is a controlling structure for the SVG representation of a guitar neck. \n///     It contains the properties and methods that are needed for overall management of guitar neck as a whole.\n///     Child classes: Fingerboard, Nut, Inlays[], Frets[], and Strings[].\n/// <reference path=\"note.js\" />\n/// <reference path=\"layout.js\" />\n/// <reference path=\"fingerboard.js\" />\n/// </summary>\nvar GuitarNeck = /*#__PURE__*/_createClass(function GuitarNeck(_fret_count, tuning_array) {\n  var _this = this;\n  _classCallCheck(this, GuitarNeck);\n  _defineProperty(this, \"make_working_tuning_array\", function () {\n    var sortedTuning = _this.tuning_array_raw;\n    console.log(\"PreSort: \".concat(sortedTuning));\n    if (_this.layout.string_order == \"DESC\") {\n      sortedTuning.reverse();\n    }\n    console.log(\"PostSort: \".concat(sortedTuning));\n    return sortedTuning;\n  });\n  _defineProperty(this, \"svg_center_point\", function () {\n    var x = _this.svg.getAttribute('width') / 2;\n    var y = _this.svg.getAttribute('height') / 2;\n    return {\n      x: x,\n      y: y\n    };\n  });\n  // // function ideal_viewBox_point(svg) {\n  // //     let screen_center = svg_center_point(svg);\n  // //     let view_box = svg.getAttribute('viewBox').split(\" \");\n  // //     let view_box_x = 200\n  // //     let view_box_y = parseFloat(view_box[1]);\n  // //     let x = svg.getAttribute('width') / 2;\n  // //     let y = svg.getAttribute('height') / 2;\n  // //     return { x: x, y: y };    \n  // // }\n  _defineProperty(this, \"render\", function () {\n    _this.svg = document.createElementNS(_this.svgNS, \"svg\");\n    var svg_width = window.innerWidth;\n    var svg_view_box_width = window.innerWidth - 50;\n    var svg_height = window.innerHeight - 300;\n    _this.svg.setAttribute(\"id\", \"neckSvg\");\n    _this.svg.setAttribute(\"width\", svg_width);\n    _this.svg.setAttribute(\"height\", svg_height);\n    // starting view_box_y value is the height of the svg element minus 200, divided by 2, then multiplied by -1.\n    // this centers the view box vertically on the svg element.\n    var view_box_y = (svg_height - 200) / 2 * -1;\n    var view_box_values = \"0 \" + view_box_y + \" \" + svg_view_box_width + \" \" + svg_height;\n    _this.svg.setAttribute(\"viewBox\", view_box_values);\n\n    // The fingerBoards vertical size is based on the number of strings\n    // and the horizontal size is based initially on width of the page \n    //     but is overridden by the last visible fret.\n    // (This compensates zooming in and out of the page)\n    _this.fingerBoard = new FingerBoard(_this.svgNS).render();\n    _this.svg.appendChild(_this.fingerBoard);\n    _this.fbInfo = document.createElementNS(_this.svgNS, \"text\");\n    _this.fbInfo.setAttribute(\"id\", \"fbInfo\");\n    _this.fbInfo.setAttribute(\"x\", \"20\");\n    _this.fbInfo.setAttribute(\"y\", \"200\");\n    _this.fbInfo.setAttribute(\"class\", \"fb-info-text\");\n    _this.fbInfo.setAttribute(\"text-anchor\", \"left\");\n    _this.fbInfo.setAttribute(\"dy\", \".5em\");\n    _this.fbInfo.textContent = \"Finger Board Info: Width: 1500 Height: 180\";\n    _this.svg.appendChild(_this.fbInfo);\n    _this.nut = document.createElementNS(_this.svgNS, \"rect\");\n    _this.nut.setAttribute(\"id\", \"nut\");\n    _this.nut.setAttribute(\"class\", \"nut\");\n    _this.nut.setAttribute(\"x\", \"40\");\n    _this.nut.setAttribute(\"y\", \"10\");\n    _this.nut.setAttribute(\"width\", \"20\");\n    _this.nut.setAttribute(\"height\", \"180\");\n    _this.nut.setAttribute(\"fill\", \"black\");\n    _this.svg.appendChild(_this.nut);\n    _this.createFrets();\n    _this.createInlays();\n    _this.createStrings();\n    _this.createFingerings();\n    return _this.svg;\n  });\n  _defineProperty(this, \"createFrets\", function () {\n    for (var i = 0; i <= _this.fretCount; i++) {\n      var fret = _this.createFret(i);\n      _this.svg.appendChild(fret);\n    }\n  });\n  _defineProperty(this, \"createFret\", function (fretIndex) {\n    var fretX = parseInt(_this.nut.getAttribute(\"x\")) + parseInt(_this.nut.getAttribute(\"width\")) - 20;\n    var fret = document.createElementNS(_this.svgNS, \"line\");\n    fret.setAttribute(\"class\", \"fret\");\n    fret.setAttribute(\"id\", \"f\".concat(fretIndex));\n    fretX = fretIndex > 0 ? 50 + _this.fretSpacing * fretIndex : fretX;\n    fret.setAttribute(\"x1\", fretX);\n    fret.setAttribute(\"y1\", \"10\");\n    fret.setAttribute(\"x2\", fretX);\n    fret.setAttribute(\"y2\", \"190\");\n    if (fretIndex == 0) {\n      fret.setAttribute(\"stroke\", \"black\");\n      fret.setAttribute(\"stroke-width\", \"0\");\n    } else {\n      fret.setAttribute(\"stroke\", \"silver\");\n      fret.setAttribute(\"stroke-width\", \"5\");\n    }\n\n    // add custom data attributes\n    fret.setAttribute(\"data-fret-index\", fretIndex);\n    _this.lastFret = fret.cloneNode();\n    return fret;\n  });\n  _defineProperty(this, \"createInlays\", function () {\n    var inlays = [3, 5, 7, 9, 12, 15, 17, 19, 21, 24];\n    inlays.forEach(function (inlay) {\n      var inlayGroup = _this.createInlay(inlay);\n      _this.svg.appendChild(inlayGroup);\n    });\n  });\n  _defineProperty(this, \"createInlay\", function (inlayIndex) {\n    var inlay = document.createElementNS(_this.svgNS, \"g\");\n    inlay.setAttribute(\"class\", \"inlay\");\n    inlay.setAttribute(\"id\", \"inlayGroup\".concat(inlayIndex));\n    inlay.setAttribute(\"data-fret-index\", inlayIndex);\n    var inlayCircle = document.createElementNS(_this.svgNS, \"circle\");\n    inlayCircle.setAttribute(\"class\", \"inlay\");\n    if (inlayIndex == 12 || inlayIndex == 24) {\n      inlayCircle.setAttribute(\"id\", \"inlay\".concat(inlayIndex, \"-1\"));\n    } else {\n      inlayCircle.setAttribute(\"id\", \"inlay\".concat(inlayIndex));\n    }\n    inlayCircle.setAttribute(\"cx\", 50 + _this.fretSpacing * inlayIndex - 30);\n    inlayCircle.setAttribute(\"cy\", inlayIndex == 12 || inlayIndex == 24 ? \"50\" : \"100\");\n    inlayCircle.setAttribute(\"r\", \"5\");\n    inlayCircle.setAttribute(\"fill\", \"white\");\n    inlay.appendChild(inlayCircle);\n    if (inlayIndex == 12 || inlayIndex == 24) {\n      var inlayCircle2 = inlayCircle.cloneNode();\n      inlayCircle2.setAttribute(\"id\", \"inlay\".concat(inlayIndex, \"-2\"));\n      inlayCircle2.setAttribute(\"cy\", \"150\");\n      inlay.appendChild(inlayCircle2);\n    }\n    return inlay;\n  });\n  _defineProperty(this, \"createStrings\", function () {\n    var stringCount = _this.working_tuning_array.length;\n    for (var i = 0; i < stringCount; i++) {\n      var string = _this.createString(i);\n\n      // Add the new string before the first fingering if it exists\n      var firstFingering = _this.svg.querySelector('.fingering');\n      if (firstFingering) {\n        _this.svg.insertBefore(string, firstFingering);\n      } else {\n        _this.svg.appendChild(string);\n      }\n    }\n  });\n  // GuitarNeck.prototype.layoutTransform = function() {\n  // }\n  _defineProperty(this, \"createString\", function (stringIndex) {\n    console.log(\"Local Tuning Array: \".concat(_this.working_tuning_array));\n    console.log(\"String index: \".concat(stringIndex, \", Tuning Value: \").concat(_this.working_tuning_array[stringIndex]));\n    var string = document.createElementNS(_this.svgNS, \"line\");\n    var fbY = parseInt(_this.fingerBoard.getAttribute(\"y\"));\n    // let fbHeight = parseInt(this.fingerBoard.getAttribute(\"height\"));    \n    var edgeMargin = _this.fingerboardEdgeMargin;\n    string.setAttribute(\"id\", \"string\".concat(stringIndex));\n    string.setAttribute(\"class\", \"guitar_string\");\n    string.setAttribute(\"x1\", 40 - _this.string_overlap_length_behind_nut);\n    string.setAttribute(\"y1\", _this.string_spacing * stringIndex + edgeMargin + fbY);\n    string.setAttribute(\"x2\", 1490 + _this.string_overlap_length_behind_nut);\n    string.setAttribute(\"y2\", _this.string_spacing * stringIndex + edgeMargin + fbY);\n    string.setAttribute(\"stroke\", \"black\");\n    string.setAttribute(\"stroke-width\", \"2\");\n\n    // Add custom data attributes\n    string.setAttribute(\"data-string-index\", stringIndex);\n    var stringRootNote = parseInt(_this.working_tuning_array[stringIndex]);\n    string.setAttribute(\"data-string-root-note-number\", stringRootNote);\n    return string;\n  });\n  _defineProperty(this, \"createFingerings\", function () {\n    var stringCount = _this.working_tuning_array.length;\n    for (var i = 0; i < stringCount; i++) {\n      var string = _this.svg.querySelector(\"#string\".concat(i));\n      var stringY = parseInt(string.getAttribute(\"y1\"));\n      var stringRootNote = parseInt(string.getAttribute(\"data-string-root-note-number\"));\n      for (var f = 0; f <= _this.fretCount; f++) {\n        var fingering = _this.createFingering(i, f, stringRootNote, stringY);\n        _this.svg.appendChild(fingering);\n      }\n    }\n  });\n  _defineProperty(this, \"createFingering\", function (stringIndex, fretIndex, rootNote, stringY) {\n    var fret = _this.svg.querySelector(\"line.fret[data-fret-index=\\\"\".concat(fretIndex, \"\\\"]\"));\n    var fretX = parseInt(fret.getAttribute('x1'));\n    var fingering = document.createElementNS(_this.svgNS, \"g\");\n    var note = new Note(rootNote + fretIndex);\n    fingering.setAttribute(\"class\", \"fingering\");\n    fingering.setAttribute(\"id\", \"fingeringS\".concat(stringIndex, \"F\").concat(fretIndex));\n    fingering.setAttribute(\"data-note-number\", note.midiNumber);\n    fingering.setAttribute(\"data-string\", stringIndex);\n    fingering.setAttribute(\"data-fret\", fretIndex);\n    fingering.setAttribute(\"data-note-name\", note.noteName);\n    fingering.setAttribute(\"data-note-octave\", note.octave);\n    fingering.setAttribute(\"data-note-spelling\", note.noteSpelling);\n    fingering.setAttribute(\"data-note-frequency\", note.frequency);\n    var noteCircle = document.createElementNS(_this.svgNS, \"circle\");\n    noteCircle.setAttribute(\"class\", \"note\");\n    noteCircle.setAttribute(\"id\", \"note\".concat(note.midiNumber, \"s\").concat(stringIndex, \"f\").concat(fretIndex));\n    noteCircle.setAttribute(\"cx\", fretX - 15);\n    noteCircle.setAttribute(\"cy\", stringY);\n    noteCircle.setAttribute(\"r\", \"15\");\n    noteCircle.setAttribute(\"fill\", \"gray\");\n    fingering.appendChild(noteCircle);\n    var noteText = document.createElementNS(_this.svgNS, \"text\");\n    noteText.setAttribute(\"x\", fretX - 15);\n    noteText.setAttribute(\"y\", stringY);\n    noteText.setAttribute(\"class\", \"note-text\");\n    noteText.setAttribute(\"text-anchor\", \"middle\");\n    noteText.setAttribute(\"dy\", \".3em\");\n    noteText.textContent = note.toString();\n    fingering.appendChild(noteText);\n    return fingering;\n  });\n  _defineProperty(this, \"updateFingerings\", function () {\n    var strings = _this.svg.querySelectorAll('line.guitar_string');\n    for (var i = 0; i < strings.length; i++) {\n      var stringFingerings = _this.svg.querySelectorAll(\"g.fingering[data-string=\\\"\".concat(i, \"\\\"]\"));\n      if (stringFingerings.length == 0) {\n        // Add notes for the new string\n        _this.createFingeringsForString(i);\n      }\n    }\n  });\n  /// <summary>\n  /// Create fingerings for the string at the given index.\n  /// also handles updating the notes if they already exist.\n  /// This method is called when a new string is added to the neck.\n  /// </summary>\n  _defineProperty(this, \"createFingeringsForString\", function (stringIndex) {\n    var string = _this.svg.querySelector(\"line.guitar_string[data-string-index=\\\"\".concat(stringIndex, \"\\\"]\"));\n    var stringY = parseInt(string.getAttribute('y1'));\n    var rootNote = parseInt(string.getAttribute('data-string-root-note-number'));\n    for (var f = 0; f <= _this.fretCount; f++) {\n      var fingering = _this.createFingering(stringIndex, f, rootNote, stringY);\n      _this.svg.appendChild(fingering);\n    }\n    var fret_index = parseInt(_this.lastFret.getAttribute('data-fret-index'));\n    _this.handleNoteVisibilityBasedOnLastFret(fret_index);\n  });\n  /// <summary>\n  /// Add a note and note-text to a fingering group.\n  _defineProperty(this, \"addNoteForString\", function (noteNumber, stringIndex, fretIndex, fretX, stringY) {\n    var noteCircle = document.createElementNS(_this.svgNS, 'circle');\n    noteCircle.setAttribute('class', 'note');\n    noteCircle.setAttribute('id', \"note\".concat(noteNumber, \"s\").concat(stringIndex, \"f\").concat(fretIndex));\n    noteCircle.setAttribute('cx', fretX - 15);\n    noteCircle.setAttribute('cy', stringY);\n    noteCircle.setAttribute('r', '15');\n    noteCircle.setAttribute('fill', 'gray');\n    var note = new Note(noteNumber);\n    // Add custom data attributes\n    noteCircle.setAttribute('data-note-number', note.midiNumber);\n    noteCircle.setAttribute('data-string', stringIndex);\n    noteCircle.setAttribute('data-fret', fretIndex);\n    noteCircle.setAttribute(\"data-note-name\", note.noteName);\n    noteCircle.setAttribute(\"data-note-octave\", note.octave);\n    noteCircle.setAttribute(\"data-note-spelling\", note.noteSpelling);\n    noteCircle.setAttribute(\"data-note-frequency\", note.frequency);\n    _this.svg.appendChild(noteCircle);\n  });\n  _defineProperty(this, \"removeNotesForString\", function (stringIndex) {\n    var notes = _this.svg.querySelectorAll(\"circle.note[data-string=\\\"\".concat(stringIndex, \"\\\"]\"));\n    notes.forEach(function (curNote) {\n      curNote.remove();\n    });\n  });\n  _defineProperty(this, \"adjustNeckWidth\", function () {\n    var pageWidth = window.innerWidth;\n    // Example: Adjust the rectangle width based on the page width     \n    _this.svg.setAttribute('width', (pageWidth - _this.svg_right_margin).toString());\n    _this.lastVisibleFret();\n    var lastFretX = parseInt(_this.lastFret.getAttribute('x1'));\n    var newFingerBoardWidth = lastFretX;\n    // Adjust the fingerboard width based on the last visible fret\n    _this.fingerBoard.setAttribute('width', newFingerBoardWidth);\n    _this.handleElementVisibility();\n    return _this.lastFret.getAttribute('id');\n  });\n  _defineProperty(this, \"handleElementVisibility\", function () {\n    var fret_index = parseInt(_this.lastFret.getAttribute('data-fret-index'));\n    //if (fret_index < this.fretCount) {\n    _this.handleNoteVisibilityBasedOnLastFret(fret_index);\n    _this.handleFretVisibilityBasedOnLastFret(fret_index);\n    _this.hideInlayVisibilityBasedOnLastFret(fret_index);\n    // } \n  });\n  _defineProperty(this, \"handleNoteVisibilityBasedOnLastFret\", function (fret_index) {\n    var fingerings = _this.svg.querySelectorAll('g.fingering');\n    if (!_this.AllNotesAreHidden()) {\n      fingerings.forEach(function (fingering) {\n        var fingering_fret_index = parseInt(fingering.getAttribute('data-fret'));\n        var note = fingering.querySelector('circle.note');\n        var noteText = fingering.querySelector('text.note-text');\n        if (fingering_fret_index > fret_index) {\n          note.style.display = 'none';\n          noteText.style.display = 'none';\n        } else if (fingering_fret_index <= fret_index) {\n          if (note.style.display == 'none') {\n            note.style.display = 'block';\n            noteText.style.display = 'block';\n          }\n        }\n      });\n    }\n  });\n  _defineProperty(this, \"handleFretVisibilityBasedOnLastFret\", function (fret_index) {\n    var frets = _this.svg.querySelectorAll('line.fret');\n    frets.forEach(function (fret) {\n      var _fret_index = parseInt(fret.getAttribute('data-fret-index'));\n      if (_fret_index > fret_index) {\n        fret.style.display = 'none';\n      } else if (_fret_index <= fret_index) {\n        if (fret.style.display == 'none') {\n          fret.style.display = 'block';\n        }\n      }\n    });\n  });\n  _defineProperty(this, \"hideInlayVisibilityBasedOnLastFret\", function (fret_index) {\n    var inlays = _this.svg.querySelectorAll('circle.inlay');\n    inlays.forEach(function (inlay) {\n      var inlay_fret_index = parseInt(inlay.getAttribute('data-fret-index'));\n      if (inlay_fret_index > fret_index) {\n        inlay.style.display = 'none';\n      } else if (inlay_fret_index <= fret_index) {\n        if (inlay.style.display == 'none') {\n          inlay.style.display = 'block';\n        }\n      }\n    });\n  });\n  /// <summary>\n  /// Adjust the frets to match the neck height        \n  /// </summary>\n  _defineProperty(this, \"updateFrets\", function () {\n    var frets = _this.svg.querySelectorAll('line.fret');\n    var fb_height = parseInt(_this.fingerBoard.getAttribute('height'));\n    var fret_count = frets.length;\n    for (var i = 0; i < fret_count; i++) {\n      var fretY = parseInt(frets[i].getAttribute('y1'));\n      frets[i].setAttribute('y2', fretY + fb_height);\n    }\n  });\n  /// <summary>\n  /// Adjust the inlays to match the neck height\n  /// </summary>\n  _defineProperty(this, \"updateInlays\", function () {\n    var inlays = _this.svg.querySelectorAll('circle.inlay');\n    var inlay_count = inlays.length;\n    var newMidLine = parseInt(parseInt(_this.svg.getAttribute('height')) / 2) + 5;\n    for (var i = 0; i < inlay_count; i++) {\n      var inlayId = inlays[i].getAttribute('id');\n      if (inlayId == 'inlay12-1' || inlayId == 'inlay24-1') {\n        inlays[i].setAttribute('cy', (newMidLine - 50).toString());\n      } else if (inlayId == 'inlay12-2' || inlayId == 'inlay24-2') {\n        inlays[i].setAttribute('cy', (newMidLine + 50).toString());\n      } else {\n        inlays[i].setAttribute('cy', newMidLine.toString());\n      }\n    }\n  });\n  /// <summary>\n  /// Adjust the neck width (rectangle \"Height\") based on the number of strings\n  /// does not currently support Bass guitar.\n  /// </summary>\n  _defineProperty(this, \"resetNeckHeight\", function () {\n    var stringCount = _this.working_tuning_array.length;\n    var fb_stringAreaHeight = stringCount * _this.string_spacing;\n    var fb_final_height = fb_stringAreaHeight + _this.fingerboardEdgeMargin * 2;\n    _this.fingerBoard.setAttribute('height', fb_final_height);\n    _this.nut.setAttribute('height', fb_final_height); // resize the nut\n    _this.svg.setAttribute('height', fb_final_height - 20); // resize the svg\n    _this.updateFrets(); // resize the frets\n    _this.updateInlays(); // center the inlays vertically on the neck    \n  });\n  _defineProperty(this, \"lastVisibleFret\", function () {\n    var frets = _this.svg.querySelectorAll('line.fret');\n    for (var i = 1; i < frets.length; i++) {\n      if (frets[i].getAttribute('x1') < window.innerWidth - _this.svg_right_margin) {\n        _this.lastFret = frets[i];\n      }\n    }\n  });\n  // strings are added to the end of the tuning array.\n  _defineProperty(this, \"addStringToNeck\", function (newStringRootNote) {\n    // add the new string to the tuning array\n    _this.tuningMidiNumbers.push(parseInt(newStringRootNote));\n    // If the StringCount was 6 prior to adding a value to the tuning array, \n    // the index of the last string, at that time, would have been 5. \n    // The string count in bound to the tuning array. So if string count was 6 before,\n    // it will now be 7, and the index of the last string will be 6.\n    // the createString method receives the INDEX of the string being added. \n    // Allowing it to associate with the correct tuning array item.\n    var string = _this.createString(_this.working_tuning_array.length - 1);\n\n    // visually, a string must be defined in the svg before any element that it should appear under.\n    // Add the new string before the first fingering if it exists. Otherwise the string line will \n    // appear above the fingering and notes.    \n    var firstFingering = _this.svg.querySelector('.fingering');\n    if (firstFingering) {\n      _this.svg.insertBefore(string, firstFingering);\n    } else {\n      _this.svg.appendChild(string);\n    }\n    _this.updateFingerings();\n    _this.resetNeckHeight();\n  });\n  /// <summary>\n  /// Remove the last string from the neck.\n  /// </summary>\n  _defineProperty(this, \"removeStringFromNeck\", function () {\n    var guitarStrings = _this.svg.querySelectorAll('line.guitar_string');\n    var stringCount = _this.working_tuning_array.length;\n    if (stringCount > 1) {\n      var stringRootNote = _this.svg.querySelector(\"line.guitar_string#string\".concat(stringCount - 1)).getAttribute('data-string-root-note-number');\n      _this.removeNotesForString(stringCount - 1);\n      _this.tuningMidiNumbers.pop(stringRootNote);\n      guitarStrings[stringCount - 1].remove();\n      _this.resetNeckHeight();\n    }\n  });\n  _defineProperty(this, \"hideAllNotes\", function () {\n    var fingerings = _this.svg.querySelectorAll('g.fingering');\n    fingerings.forEach(function (fingering) {\n      var note = fingering.querySelector('circle.note');\n      var noteText = fingering.querySelector('text.note-text');\n      note.style.display = 'none';\n      noteText.style.display = 'none';\n    });\n    _this._allNotesAreHidden = true;\n  });\n  _defineProperty(this, \"showAllNotes\", function () {\n    var fingerings = _this.svg.querySelectorAll('g.fingering');\n    var last_fret_index = parseInt(_this.lastFret.getAttribute('data-fret-index'));\n    fingerings.forEach(function (fingering) {\n      var note_fret_index = parseInt(fingering.getAttribute('data-fret'));\n      if (note_fret_index <= last_fret_index) {\n        var note = fingering.querySelector('circle.note');\n        var noteText = fingering.querySelector('text.note-text');\n        note.style.display = 'block';\n        noteText.style.display = 'block';\n        note.style.fill = 'gray';\n      }\n    });\n    _this._allNotesAreHidden = false;\n  });\n  _defineProperty(this, \"AllNotesAreHidden\", function () {\n    return _this._allNotesAreHidden;\n  });\n  _defineProperty(this, \"StringCount\", function () {\n    return _this.tuning_array_raw.length;\n  });\n  _defineProperty(this, \"GetFingeringInfo\", function (stringIndex, fretIndex) {\n    var note = _this.svg.querySelector(\"circle.note[data-string=\\\"\".concat(stringIndex, \"\\\"][data-fret=\\\"\").concat(fretIndex, \"\\\"]\"));\n    var noteName = note.getAttribute('data-note-name');\n    var noteOctave = note.getAttribute('data-note-octave');\n    var noteFrequency = note.getAttribute('data-note-frequency');\n    var noteSpelling = note.getAttribute('data-note-spelling');\n    return {\n      noteName: noteName,\n      noteOctave: noteOctave,\n      noteFrequency: noteFrequency,\n      noteSpelling: noteSpelling\n    };\n  });\n  _defineProperty(this, \"ShowScale\", function () {\n    var scaleRootNote = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"C\";\n    var scaleType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"Major\";\n    var scaleNotes = _this.GetScaleNotes(scaleRootNote, scaleType);\n    var noteCount = scaleNotes.length;\n    _this.hideAllNotes();\n    var _loop = function _loop() {\n      var note = scaleNotes[i];\n      console.log(\"Showing \".concat(note, \" notes\"));\n      for (var j = 0; j < _this.working_tuning_array.length; j++) {\n        var lastFretIndex = 0;\n        if (_this.lastFret) {\n          lastFretIndex = parseInt(_this.lastFret.getAttribute('data-fret-index'));\n        } else {\n          lastFretIndex = _this.fretCount;\n        }\n        for (var f = 0; f <= lastFretIndex; f++) {\n          var fingerings = _this.svg.querySelectorAll(\"g.fingering[data-note-name=\\\"\".concat(note, \"\\\"][data-string=\\\"\").concat(j, \"\\\"][data-fret=\\\"\").concat(f, \"\\\"]\"));\n          fingerings.forEach(function (curFingering) {\n            var curNote = curFingering.querySelector('circle.note');\n            var curNoteText = curFingering.querySelector('text.note-text');\n            curNote.style.display = 'block';\n            curNoteText.style.display = 'block';\n            if (note == scaleRootNote) {\n              curNote.style.fill = 'blue';\n            } else {\n              curNote.style.fill = 'gray';\n            }\n          });\n        }\n      }\n      _this._allNotesAreHidden = false;\n    };\n    for (var i = 0; i < noteCount; i++) {\n      _loop();\n    }\n  });\n  _defineProperty(this, \"GetScaleNotes\", function (scaleRootNote, scaleType) {\n    console.log(\"Getting \".concat(scaleType, \" scale notes for \").concat(scaleRootNote));\n    var scaleNotes = [];\n    var notes = \"C C# D D# E F F# G G# A A# B\".split(\" \");\n    var scalePattern = [];\n    if (scaleType == \"Major\") {\n      scalePattern = [2, 2, 1, 2, 2, 2, 1];\n    }\n    if (scaleType == \"Minor\") {\n      scalePattern = [2, 1, 2, 2, 1, 2, 2];\n    }\n    if (scaleType == \"Pentatonic\") {\n      scalePattern = [3, 2, 2, 3, 2];\n    }\n    if (scaleType == \"Blues\") {\n      scalePattern = [3, 2, 1, 1, 3, 2];\n    }\n    if (scaleType == \"Harmonic Minor\") {\n      scalePattern = [2, 1, 2, 2, 1, 3, 1];\n    }\n    if (scaleType == \"Melodic Minor\") {\n      scalePattern = [2, 1, 2, 2, 2, 2, 1];\n    }\n    scaleNotes.push(scaleRootNote);\n    var noteIndex = notes.indexOf(scaleRootNote);\n    console.log(\"Scale Pattern: \".concat(scalePattern));\n    for (var i = 0; i < scalePattern.length; i++) {\n      noteIndex = noteIndex + scalePattern[i];\n      if (noteIndex > 11) {\n        noteIndex = noteIndex - 12;\n      }\n      var nextNote = notes[noteIndex];\n      scaleNotes.push(nextNote);\n    }\n    return scaleNotes;\n  });\n  // GuitarNeck.prototype.renderStringPreview = function() {\n  //     let pv_fb_margin = 10;\n  //     let pv_string_spacing = 16;\n  //     let stringCount = this.working_tuning_array.length;\n  //     let pv_SVG_height = stringCount * pv_string_spacing + (pv_fb_margin * 2); // 6  = 6 * 16 + 10 * 2 = 96 + 20 = 116\n  //     let stringPreviewSVG = document.createElementNS(this.svgNS, \"svg\");\n  //     stringPreviewSVG.setAttribute(\"id\", \"stringPreviewSVG\");\n  //     stringPreviewSVG.setAttribute(\"x\", \"0\");\n  //     stringPreviewSVG.setAttribute(\"y\", \"0\");\n  //     stringPreviewSVG.setAttribute(\"width\", \"100\");\n  //     stringPreviewSVG.setAttribute(\"height\", (pv_SVG_height).toString());    \n  //     let stringPreviewNeck = document.createElementNS(this.svgNS, \"rect\");\n  //     stringPreviewNeck.setAttribute(\"x\", \"10\");\n  //     stringPreviewNeck.setAttribute(\"y\", \"0\");\n  //     stringPreviewNeck.setAttribute(\"width\", \"90\");\n  //     stringPreviewNeck.setAttribute(\"height\", (pv_SVG_height).toString());\n  //     stringPreviewNeck.setAttribute(\"stroke\", \"black\");\n  //     stringPreviewNeck.setAttribute(\"stroke-width\", \"2\");\n  //     stringPreviewNeck.setAttribute(\"fill\", \"white\");\n  //     stringPreviewSVG.appendChild(stringPreviewNeck);\n  //     let firstStringY = pv_fb_margin;\n  //     for (let i = 0; i < this.working_tuning_array.length; i++) {\n  //         let existingString = document.createElementNS(this.svgNS, \"line\");\n  //         existingString.setAttribute(\"x1\", \"2\");\n  //         let thisStringY = firstStringY + (pv_string_spacing * i);        \n  //         existingString.setAttribute(\"y1\", (thisStringY).toString());\n  //         existingString.setAttribute(\"x2\", \"100\");\n  //         existingString.setAttribute(\"y2\", (thisStringY).toString());\n  //         existingString.setAttribute(\"stroke\", \"black\");\n  //         existingString.setAttribute(\"stroke-width\", \"2\");        \n  //         stringPreviewSVG.appendChild(existingString);\n  //     }\n  //     let previewStringPointer = document.createElementNS(this.svgNS, \"polygon\");\n  //     previewStringPointer.setAttribute(\"id\", \"previewStringPointer\");\n  //     let pointerCenterRef = firstStringY + (pv_string_spacing * stringCount);\n  //     let pX1 = \"0\";\n  //     let pY1 = (pointerCenterRef - 5).toString();\n  //     let pX2 = \"10\";\n  //     let pY2 = (pointerCenterRef).toString();\n  //     let pY3 = (pointerCenterRef + 5).toString();\n  //     previewStringPointer.setAttribute(\"points\", `${pX1},${pY1} ${pX2},${pY2} ${pX1},${pY3}`);\n  //     previewStringPointer.setAttribute(\"fill\", \"red\");\n  //     stringPreviewSVG.appendChild(previewStringPointer);\n  //     let previewStringLine = document.createElementNS(this.svgNS, \"line\");        \n  //     previewStringLine.setAttribute(\"id\",\"previewStringLine\");\n  //     previewStringLine.setAttribute(\"x1\",\"10\");\n  //     previewStringLine.setAttribute(\"x2\",\"100\");\n  //     previewStringLine.setAttribute(\"y1\",(pointerCenterRef).toString()); \n  //     previewStringLine.setAttribute(\"y2\",(pointerCenterRef).toString()); \n  //     previewStringLine.setAttribute(\"stroke\",\"red\");\n  //     previewStringLine.setAttribute(\"stroke-width\",\"1.5\");\n  //     stringPreviewSVG.appendChild(previewStringLine);    \n  //     return stringPreviewSVG;\n  // }\n  // GuitarNeck.prototype.NewStringLocationPreview = function(proposedStringRootNote) {\n  //     const proposedRootNote = parseInt(proposedStringRootNote);    \n  //     let tuningArray = this.tuningMidiNumbers();\n  //     let stringCount = this.working_tuning_array.length;    \n  //     let targetPosition = null;\n  //     if (proposedStringRootNote < tuningArray[0]) {\n  //         targetPosition = 0; // index of the first string\n  //     } \n  //     // we need to find the existing string that the new string will be inserted before\n  //     if (!targetPosition){        // if the target position has not been set\n  //         for (let i = 1; i < stringCount; i++) {     // start at the second string \n  //             let currentStringRootNote = tuningArray[i];\n  //             if (proposedRootNote < currentStringRootNote) {\n  //                 // The new string will be inserted before the current string\n  //                 targetPosition = i;\n  //                 break;\n  //             } else if (proposedRootNote == currentStringRootNote) {\n  //                 // return a message indicating that the string already exists\n  //                 targetPosition = -1;\n  //                 break;\n  //             }            \n  //         }\n  //         if (!targetPosition) {\n  //             targetPosition = stringCount; // the new string will be added to the end of the tuning array\n  //         }\n  //     }           \n  //     // draw the representations.\n  //     if (targetPosition >= 0) {\n  //         let proposedString = this.createProposedString(targetPosition);\n  //     }\n  // }\n  _defineProperty(this, \"zoomNeck\", function (zoomValue) {\n    var view_box = _this.svg.getAttribute('viewBox').split(\" \");\n    var svgH = _this.svg.getAttribute('height');\n    var svhW = _this.svg.getAttribute('width');\n    var svgRatio = svgH / svhW;\n    var neckH = parseInt(_this.fingerBoard.getAttribute('height')) + 30;\n    var diff = svgH - neckH;\n    var newHeight = svgH - diff * (zoomValue / 100);\n    var newWidth = newHeight / svgRatio;\n    var ydiff = (svgH - neckH) / 2;\n    // newY is the svg height minus the neck height divided by 2 minus 15\n    var newY = ydiff * (1.0 - zoomValue / 100) * -1;\n    view_box[1] = newY.toString();\n    view_box[2] = newWidth.toString();\n    view_box[3] = newHeight.toString();\n    _this.svg.setAttribute('viewBox', view_box.join(\" \"));\n  });\n  _defineProperty(this, \"print_layout\", function (curLayout) {\n    console.log(\"Layout Name: \".concat(curLayout.layout_name));\n    console.log(\"String Order: \".concat(curLayout.string_order));\n    console.log(\"Fret Order: \".concat(curLayout.fret_order));\n  });\n  _defineProperty(this, \"setNeckLayout\", function (layoutName) {\n    // console.log(layoutName);\n    // let layout1 = this.layout_options[0].name.toLowerCase();\n    // console.log(layout1);\n    // let layout2 = this.layout_options[1].name.toLowerCase();\n    //  console.log(layout2);\n    // let layout3 = this.layout_options[2].name.toLowerCase();\n    // console.log(layout3);\n\n    _this.layout = layoutName.toUpperCase();\n    _this.working_tuning_array = _this.make_working_tuning_array();\n    _this.render();\n  });\n  // Properties needed before we can start rendering the neck.\n  this.fretCount = _fret_count ? _fret_count : 24;\n  this.tuning_array_raw = tuning_array !== null && tuning_array !== void 0 ? tuning_array : [40, 45, 50, 55, 59, 64];\n  this.svg = null; // SVG element root    \n  this.fingerBoard = null; // SVG rect element         \n  this.nut = null; // SVG rect element\n  this.svgNS = \"http://www.w3.org/2000/svg\";\n  this.svg_right_margin = 50;\n  this.string_overlap_length_behind_nut = 20;\n  this.lastFret = null;\n  this._allNotesAreHidden = false;\n  this.fingeringsBaseX = 25;\n  this.defaultOverallHeight = 200;\n  this.minHeight = 80;\n  this.fretSpacing = 59;\n  this.string_spacing = 30;\n  this.fingerboardEdgeMargin = 15;\n  this.layout_options = Array.of(new Layout('LEFTY_INSTRUCTOR', 'ASC', 'ASC'), new Layout('GUITAR_TABISH', 'DESC', 'ASC'), new Layout('RIGHTY_INSTRUCTOR', 'ASC', 'DESC'));\n  this.layout = this.layout_options[1];\n  this.layout.print_layout();\n  this.working_tuning_array = this.make_working_tuning_array();\n});\nmodule.exports = GuitarNeck;\n\n//# sourceURL=webpack://guiteach/./src/guitarneck.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("var GuitarNeck = __webpack_require__(/*! ./guitarneck.js */ \"./src/guitarneck.js\");\nvar guitarNeckInstance = new GuitarNeck();\nwindow.onload = function () {\n  console.log(guitarNeckInstance);\n  var svgCont = document.getElementById(\"guitar_neck_container\");\n  if (svgCont) {\n    svgCont.appendChild(guitarNeckInstance.render());\n  }\n  var wiw = document.getElementById(\"wiw\");\n  var svginfo = document.getElementById(\"neckSvg\");\n  wiw.innerText = \"WindowWidth: \" + window.innerWidth + \" WindowHeight: \" + window.innerHeight + \" SVGX: \" + svginfo.x.baseVal.value + \" SVGY: \" + svginfo.y.baseVal.value + \" SVGWidth: \" + svginfo.width.baseVal.value + \" SVGHeight: \" + svginfo.height.baseVal.value + \" SVGViewBox: width \" + svginfo.viewBox.baseVal.width + \" SVGViewBox: height \" + svginfo.viewBox.baseVal.height + \" SVGViewBox: x \" + svginfo.viewBox.baseVal.x + \" SVGViewBox: y \" + svginfo.viewBox.baseVal.y;\n  document.getElementById(\"showScaleBtn\").onclick = function () {\n    var scaleRootNote = document.getElementById('scaleRootNote').value;\n    var scaleType = document.getElementById('scaleType').value;\n    guitarNeckInstance.ShowScale(scaleRootNote, scaleType);\n  };\n  document.getElementById(\"toggleAllNotesBtn\").onclick = function () {\n    toggleAllNotes();\n  };\n  document.getElementById(\"displayLayout\").onchange = function () {\n    var layoutName_raw = document.getElementById(\"displayLayout\").value;\n    var layoutName = layoutName_raw.toLowerCase();\n    var foundName = guitarNeckInstance.layout_options.find(function (x) {\n      return x.name.toLowerCase() === layoutName;\n    }).name;\n    foundName = foundName.toLowerCase();\n    guitarNeckInstance.setNeckLayout(foundName);\n  };\n  document.getElementById(\"zoom_slider\").oninput = function () {\n    var zoomValue = document.getElementById('zoom_slider').value;\n    console.log(zoomValue);\n    guitarNeckInstance.zoomNeck(zoomValue);\n  };\n  guitarNeckInstance.adjustNeckWidth();\n};\nwindow.onresize = function () {\n  guitarNeckInstance.adjustNeckWidth();\n};\nfunction toggleAllNotes() {\n  if (guitarNeckInstance.AllNotesAreHidden()) {\n    guitarNeckInstance.showAllNotes();\n    document.getElementById('toggleAllNotesBtn').innerText = 'Hide all Notes';\n    return;\n  }\n  guitarNeckInstance.hideAllNotes();\n  document.getElementById('toggleAllNotesBtn').innerText = 'Show all Notes';\n}\n\n//# sourceURL=webpack://guiteach/./src/index.js?");

/***/ }),

/***/ "./src/layout.js":
/*!***********************!*\
  !*** ./src/layout.js ***!
  \***********************/
/***/ ((module) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar Layout = /*#__PURE__*/function () {\n  function Layout(name, string_order, fret_order) {\n    _classCallCheck(this, Layout);\n    this.name = name;\n    this.string_order = string_order;\n    this.fret_order = fret_order;\n  }\n  return _createClass(Layout, [{\n    key: \"print_layout\",\n    value: function print_layout() {\n      console.log(\"layout name: \".concat(this.name, \", string_order: \").concat(this.string_order, \", fret_order: \").concat(this.fret_order));\n    }\n  }]);\n}();\nmodule.exports = Layout;\n\n//# sourceURL=webpack://guiteach/./src/layout.js?");

/***/ }),

/***/ "./src/note.js":
/*!*********************!*\
  !*** ./src/note.js ***!
  \*********************/
/***/ ((module) => {

eval("function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar Note = /*#__PURE__*/_createClass(function Note(midiNumber) {\n  var _this = this;\n  _classCallCheck(this, Note);\n  _defineProperty(this, \"toString\", function () {\n    return _this.noteName + _this.octave;\n  });\n  _defineProperty(this, \"getNoteName\", function () {\n    var noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    return noteNames[_this.midiNumber % 12];\n  });\n  _defineProperty(this, \"getOctave\", function () {\n    return Math.floor(_this.midiNumber / 12) - 1;\n  });\n  _defineProperty(this, \"getFrequency\", function () {\n    return 440 * Math.pow(2, (_this.midiNumber - 69) / 12);\n  });\n  _defineProperty(this, \"getNoteDetails\", function () {\n    return {\n      noteName: _this.noteName,\n      octave: _this.octave,\n      frequency: _this.frequency,\n      spelling: _this.toString()\n    };\n  });\n  this.midiNumber = midiNumber;\n  this.noteName = this.getNoteName();\n  this.octave = this.getOctave();\n  this.frequency = this.getFrequency();\n}); // Export for Node.js\nmodule.exports = Note;\n\n//# sourceURL=webpack://guiteach/./src/note.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;